searchState.loadedDescShard("sui_indexer", 0, "Cached static for the <code>exchange_rates</code> function.\nCached exchange rates for validators for the given epoch, …\nPrimes the cached function <code>exchange_rates</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStarts a backfill pipeline from the ingestion engine. …\n\\sql is the SQL string to run, appended with the range …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBackfill the database for a specific range.\nRestore the database from formal snaphots.\nBackfill DB tables for some ID range [\\start, \\end]. The …\nRun through the migration scripts.\nLimit indexing parallelism on big checkpoints to avoid …\nNumber of checkpoints to backfill in a single SQL command.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of concurrent tasks to run.\nEnd of the range to backfill, inclusive.\nStart of the range to backfill, inclusive. It can be a …\nGet a new dedicated connection that will not be managed by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a connection from the pool.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the provided Migrations\nReturns information about the current state of the pool.\nReturns the database url that this pool is configured with\nChecks that the local migration scripts is a prefix of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBy default, return u64::MAX, which means no extra waiting …\nread high watermark of the table DB\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncommit batch of transformed data to DB\nreturn handler name\nset high watermark of the table DB, also update metrics.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAlong with InMemObjectCache, TxChangesProcessor implements …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nRetrieve the system state data for the given epoch. If no …\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is the system state summary at the beginning of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nModel types related to tables that support efficient …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe full type of this object, including package id, …\nName of the object type, e.g., “Coin”, without type …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBCS serialized CertifiedCheckpointSummary\nBCS serialized CheckpointContents\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nReturns the argument unchanged.\nGet the range of the protocol versions that need to be …\nCalls <code>U::from(self)</code>.\nPersist protocol configs and feature flags until the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA package resolver that reads packages from the database.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to fetch the partitioning strategy for the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal instance of a <code>postgres</code> server.\nA temporary, local postgres database\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn an ephemeral, available port. On unix systems, the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate and start a new temporary postgres database.\nStart a local <code>postgres</code> database service.\nInitialize and start a local <code>postgres</code> database service.\nReturn the url used to connect to the database\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet up a test indexer fetching from a REST endpoint served …\nStarts an indexer reader or writer for testing depending …\nWait for the indexer to catch up to the given checkpoint …\nWait for the indexer to catch up to the given checkpoint …\nInstantiates a config for indexer in writer mode with the …\nNew object creation\nDelete object\nContains the error value\nRepresents system state and summary info at the start and …\nObject mutated.\nContains the success value\nWrapped object\nStruct name of the event, without type parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>IndexedEpochInfo</code> for epoch X-1 at the boundary of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType instantiation of the event, with type name and type …\nStruct name of the event, without type parameters.")